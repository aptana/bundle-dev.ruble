!!com.aptana.scripting.model.BundleElement
author: Christopher Williams, Andrew Shebanow
children:
- !!com.aptana.scripting.model.MenuElement
  children:
  - children: &id001 []
    commandName: Show Scope
    customProperties: null
    displayName: Show Scope
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: Copy Scope
    customProperties: null
    displayName: Copy Scope
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: '-'
    customProperties: null
    displayName: '-'
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: Show ENV
    customProperties: null
    displayName: Show ENV
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: '-'
    customProperties: null
    displayName: '-'
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: Install Bundle
    customProperties: null
    displayName: Install Bundle
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: Update User Bundles
    customProperties: null
    displayName: Update User Bundles
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: Convert TextMate Bundle
    customProperties: null
    displayName: Convert TextMate Bundle
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: Flush Bundle Caches
    customProperties: null
    displayName: Flush Bundle Caches
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: '-'
    customProperties: null
    displayName: '-'
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: Show Command Bindings
    customProperties: null
    displayName: Show Command Bindings
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: Show Active Commands in Scope
    customProperties: null
    displayName: Show Active Commands in Scope
    path: bundle.rb
    scope: null
  - children: *id001
    commandName: Show Active Snippets in Scope
    customProperties: null
    displayName: Show Active Snippets in Scope
    path: bundle.rb
    scope: null
  commandName: Bundle Development
  customProperties: null
  displayName: Bundle Development
  path: bundle.rb
  scope: null
- !!com.aptana.scripting.model.CommandElement {async: false, customProperties: null,
  displayName: Show Active Commands in Scope, inputPath: null, keyBindingMap: null,
  outputPath: null, outputType: create_new_document, path: commands/active_scope_commands.rb,
  runType: current_thread, scope: null, workingDirectoryType: UNDEFINED}
- !!com.aptana.scripting.model.CommandElement {async: false, customProperties: null,
  displayName: Show Active Snippets in Scope, inputPath: null, keyBindingMap: null,
  outputPath: null, outputType: create_new_document, path: commands/active_scope_snippets.rb,
  runType: current_thread, scope: null, workingDirectoryType: UNDEFINED}
- !!com.aptana.scripting.model.CommandElement {async: false, customProperties: null,
  displayName: Show Command Bindings, inputPath: null, keyBindingMap: null, outputPath: null,
  outputType: create_new_document, path: commands/command_bindings.rb, runType: current_thread,
  scope: null, workingDirectoryType: UNDEFINED}
- !!com.aptana.scripting.model.CommandElement {async: false, customProperties: null,
  displayName: Convert TextMate Bundle, inputPath: null, keyBindingMap: null, outputPath: null,
  outputType: show_as_tooltip, path: commands/convert_bundle.rb, runType: current_thread,
  scope: null, workingDirectoryType: UNDEFINED}
- !!com.aptana.scripting.model.CommandElement
  async: false
  customProperties: null
  displayName: Copy Scope
  inputPath: null
  keyBindingMap:
    !!com.aptana.scripting.model.Platform 'ALL': [CONTROL+SHIFT+COMMAND+C]
  outputPath: null
  outputType: copy_to_clipboard
  path: commands/copy_scope.rb
  runType: current_thread
  scope: null
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.CommandElement
  async: false
  customProperties: null
  displayName: Show ENV
  inputPath: null
  keyBindingMap:
    !!com.aptana.scripting.model.Platform 'ALL': [CONTROL+SHIFT+E]
  outputPath: null
  outputType: show_as_tooltip
  path: commands/env.rb
  runType: current_thread
  scope: null
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.CommandElement {async: false, customProperties: null,
  displayName: Flush Bundle Caches, inputPath: null, keyBindingMap: null, outputPath: null,
  outputType: show_as_tooltip, path: commands/flush_cache.rb, runType: current_thread,
  scope: null, workingDirectoryType: UNDEFINED}
- !!com.aptana.scripting.model.CommandElement {async: false, customProperties: null,
  displayName: Install Bundle, inputPath: null, keyBindingMap: null, outputPath: null,
  outputType: undefined, path: commands/install_bundle.rb, runType: current_thread,
  scope: null, workingDirectoryType: UNDEFINED}
- !!com.aptana.scripting.model.CommandElement
  async: false
  customProperties: null
  displayName: Show Scope
  inputPath: null
  keyBindingMap:
    !!com.aptana.scripting.model.Platform 'ALL': [CONTROL+SHIFT+P]
  outputPath: null
  outputType: show_as_tooltip
  path: commands/show_scope.rb
  runType: current_thread
  scope: null
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.CommandElement {async: false, customProperties: null,
  displayName: Update User Bundles, inputPath: null, keyBindingMap: null, outputPath: null,
  outputType: show_as_tooltip, path: commands/update.rb, runType: current_thread,
  scope: null, workingDirectoryType: UNDEFINED}
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [sn]
  displayName: snippet
  expansion: "snippet '${1:name}' do |s|\n  s.trigger = '${2:trigger}'\n  s.scope\
    \ = '${3:source.ruby}'\n  s.expansion = \"${4:example}\"\nend"
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [m.]
  displayName: m.command
  expansion: 'm.command ''${1:command_or_snippet_name}''

    m.$0'
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [m.]
  displayName: m.separator
  expansion: 'm.separator

    m.$0'
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [m.]
  displayName: m.menu
  expansion: "m.menu '${1:submenu}' do |m|\n  m.$0\nend"
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [co]
  displayName: command
  expansion: "require 'ruble'\n\ncommand '${1:name}' do |cmd|\n  cmd.input = :${2:none/document/selection/word/right_character/left_character/line/clipboard/selected_lines}\n\
    \  cmd.output = :${3:discard/show_as_tooltip/replace_selection/replace_line/replace_word/show_as_html/insert_as_text/insert_as_snippet/create_new_document}\n\
    \  cmd.key_binding = '${4:CONTROL+SHIFT+E}'\n  cmd.scope = '${5:source.ruby}'\n\
    \  cmd.invoke do |context|\n    # Write your ruby code here. If there's a non-nil\
    \ return value for the block that will be used as output/result value.\n    #\
    \ Otherwise we'll take what was piped to STDOUT\n    nil\n  end\nend"
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.CommandElement
  async: false
  customProperties:
    prefix_values: [bu]
  displayName: bundle
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [ca]
  displayName: content_assist
  expansion: "require 'ruble'\n\ncontent_assist '${1:name}' do |ca|\n  ca.scope =\
    \ '${2:source.ruby}'\n  ca.invoke do |context|\n    # Write your ruby code here.\
    \ If there's a non-nil return value for the block that will be used as output/result\
    \ value.\n    # Otherwise we'll take what was piped to STDOUT\n    \n    # Content\
    \ Assist is a little odd, it assumes the return value is a string that can be\
    \ eval'd to an \n    # Array of strings or hashes that are the list of completion\
    \ proposals.\n    [${3:'example', 'values'}].inspect\n  end\nend"
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [wi]
  displayName: with_defaults
  expansion: "with_defaults :${1:scope} => '${2:source.ruby}' do\n  $0\nend"
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [env]
  displayName: env
  expansion: "env '${1:source.ruby}' do |e|\n  e['${2:TM_COMMENT_START}'] = '${3:#\
    \ }'\nend"
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [stp]
  displayName: smart_typing_pairs
  expansion: smart_typing_pairs['${1:source.ruby}'] = ['${2:"}', '$2']
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
- !!com.aptana.scripting.model.SnippetElement
  async: false
  customProperties:
    prefix_values: [pt]
  displayName: project_template
  expansion: "project_template '${1:name}' do |t|\n  t.type = :${2:name}\n  t.location\
    \ = '${3:relative_filename.zip}'\n  t.description = '${4:description}'\nend"
  inputPath: null
  keyBindingMap: null
  outputPath: null
  outputType: insert_as_snippet
  path: snippets/snippets.rb
  runType: current_thread
  scope: source.ruby
  workingDirectoryType: UNDEFINED
copyright: (C) Copyright 2010 Aptana Inc. Distributed under the MIT license.
customProperties: null
decreaseIndentMarkers: &id002 {}
description: A quick and dirty bundle to make it easier to update your other bundles.
displayName: Bundle Development
fileTypeRegistry: *id002
fileTypes: *id001
foldingStartMarkers: *id002
foldingStopMarkers: *id002
increaseIndentMarkers: *id002
license: null
licenseUrl: null
path: bundle.rb
repository: git://github.com/aptana/bundle-dev.ruble.git
visible: true
